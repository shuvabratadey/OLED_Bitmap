#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "images.h"
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME280 bme; // I2C

static const unsigned char PROGMEM image_humidity_bits[] = {0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x0e, 0x70, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x38, 0x1c, 0x00, 0x00, 0x70, 0x0e, 0x00, 0x00, 0x60, 0x06, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x01, 0xc0, 0x03, 0x80, 0x03, 0x9e, 0x01, 0xc0, 0x03, 0x3f, 0x00, 0xc0, 0x07, 0x33, 0x0c, 0xe0, 0x06, 0x33, 0x1c, 0x60, 0x06, 0x3f, 0x38, 0x60, 0x0c, 0x1e, 0x70, 0x30, 0x0c, 0x00, 0xe0, 0x30, 0x0c, 0x01, 0xc0, 0x30, 0x0c, 0x03, 0x80, 0x30, 0x0c, 0x07, 0x00, 0x30, 0x0c, 0x0e, 0x78, 0x30, 0x06, 0x1c, 0xfc, 0x60, 0x06, 0x38, 0xcc, 0x60, 0x07, 0x30, 0xcc, 0xe0, 0x03, 0x00, 0xfc, 0xc0, 0x01, 0x80, 0x79, 0x80, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x00};

static const unsigned char PROGMEM image_temperature_bits[] = {0x00, 0x38, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x0e, 0x00, 0x00, 0x96, 0x3f, 0x1c, 0x00, 0x96, 0x20, 0x94, 0x00, 0x96, 0x60, 0x9c, 0x00, 0x96, 0x60, 0x00, 0x00, 0x96, 0x60, 0x00, 0x00, 0x96, 0x60, 0x00, 0x00, 0x96, 0x60, 0x00, 0x00, 0x96, 0x60, 0x80, 0x00, 0x96, 0x60, 0x80, 0x00, 0x96, 0x21, 0x80, 0x00, 0x96, 0x1f, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x01, 0xb3, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x01, 0x29, 0x00, 0x00, 0x01, 0x3b, 0x00, 0x00, 0x01, 0x82, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00};

Adafruit_SSD1306 display(128, 64, &Wire, -1);

#define TIME_DELAY_MS 250

void Show_Temp_Humidity()
{
  display.setCursor(42, 10);
  display.print(bme.readTemperature());

  if (bme.readHumidity() < 100)
  {
    display.setCursor(53, 40);
  }
  else
  {
    display.setCursor(42, 40);
  }
  display.print((int)bme.readHumidity());
}

void setup() {
  Serial.begin(115200);
  if (!bme.begin(0x76))
  {
    Serial.println(F("BME280 failed"));
    for (;;)
      ;
  }
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  display.setTextColor(1);
  display.setTextSize(2);
  display.setTextWrap(false);

  display.clearDisplay();
  display.display();
}

void loop() {
  for (int i = 0; i < BITMAP_ARRAY_LEN; i++)
  {
    display.clearDisplay();
    display.drawBitmap(78, 30, image_humidity_bits, 32, 32, 1);
    display.drawBitmap(97, 0, image_temperature_bits, 32, 32, 1);
    display.drawBitmap(4, 13, bitmap_panda[i], 32, 32, 1);
    Show_Temp_Humidity();
    display.display();
    delay(TIME_DELAY_MS);
  }
  for (int i = 0; i < BITMAP_ARRAY_LEN; i++)
  {
    display.clearDisplay();
    display.drawBitmap(78, 30, image_humidity_bits, 32, 32, 1);
    display.drawBitmap(97, 0, image_temperature_bits, 32, 32, 1);
    display.drawBitmap(4, 13, bitmap_panda[BITMAP_ARRAY_LEN - i - 1], 32, 32, 1);
    Show_Temp_Humidity();
    display.display();
    delay(TIME_DELAY_MS);
  }
}
